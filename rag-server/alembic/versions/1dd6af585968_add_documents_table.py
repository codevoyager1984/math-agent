"""Add documents table

Revision ID: 1dd6af585968
Revises: fc787215cfcc
Create Date: 2025-09-15 19:04:01.226918

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1dd6af585968'
down_revision: Union[str, None] = 'fc787215cfcc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chat_messages',
    sa.Column('id', sa.String(length=36), nullable=False, comment='消息ID'),
    sa.Column('session_id', sa.String(length=36), nullable=False, comment='会话ID'),
    sa.Column('role', sa.String(length=20), nullable=False, comment='角色：user, assistant, system'),
    sa.Column('content', sa.Text(), nullable=False, comment='消息内容'),
    sa.Column('reasoning', sa.Text(), nullable=True, comment='AI思考过程'),
    sa.Column('message_type', sa.String(length=50), nullable=True, comment='消息类型'),
    sa.Column('knowledge_points', sa.JSON(), nullable=True, comment='关联的知识点数据'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.Column('message_data', sa.JSON(), nullable=True, comment='消息数据'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('chat_sessions',
    sa.Column('id', sa.String(length=36), nullable=False, comment='会话ID'),
    sa.Column('document_id', sa.String(length=36), nullable=False, comment='关联的文档ID'),
    sa.Column('status', sa.Enum('ACTIVE', 'COMPLETED', 'EXPIRED', name='chatsessionstatus'), nullable=True, comment='会话状态'),
    sa.Column('current_knowledge_points', sa.JSON(), nullable=True, comment='当前生成的知识点'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.Column('last_activity', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='最后活动时间'),
    sa.Column('session_data', sa.JSON(), nullable=True, comment='会话数据'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('documents',
    sa.Column('id', sa.String(length=36), nullable=False, comment='文档ID'),
    sa.Column('filename', sa.String(length=255), nullable=False, comment='文件名'),
    sa.Column('original_filename', sa.String(length=255), nullable=False, comment='原始文件名'),
    sa.Column('file_size', sa.Integer(), nullable=False, comment='文件大小（字节）'),
    sa.Column('file_type', sa.String(length=50), nullable=False, comment='文件类型'),
    sa.Column('extracted_text', sa.Text(), nullable=False, comment='提取的文本内容'),
    sa.Column('text_preview', sa.Text(), nullable=True, comment='文本预览（前2000字符）'),
    sa.Column('status', sa.Enum('UPLOADING', 'PROCESSING', 'COMPLETED', 'FAILED', name='documentstatus'), nullable=True, comment='处理状态'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='错误信息'),
    sa.Column('user_requirements', sa.Text(), nullable=True, comment='用户特殊要求'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='更新时间'),
    sa.Column('extra_data', sa.JSON(), nullable=True, comment='额外数据'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index(op.f('idx_search_logs_created_at'), table_name='search_logs')
    op.drop_index(op.f('idx_search_logs_query_type'), table_name='search_logs')
    op.drop_index(op.f('idx_search_logs_response_time'), table_name='search_logs')
    op.drop_index(op.f('ix_search_logs_id'), table_name='search_logs')
    op.drop_table('search_logs')
    op.drop_index(op.f('idx_knowledge_points_category'), table_name='knowledge_points')
    op.drop_index(op.f('idx_knowledge_points_created_at'), table_name='knowledge_points')
    op.drop_index(op.f('idx_knowledge_points_difficulty'), table_name='knowledge_points')
    op.drop_index(op.f('idx_knowledge_points_title_gin'), table_name='knowledge_points', postgresql_ops={'title': 'gin_trgm_ops'}, postgresql_using='gin')
    op.drop_index(op.f('ix_knowledge_points_id'), table_name='knowledge_points')
    op.drop_table('knowledge_points')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('knowledge_points',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False, comment='关联的文档ID'),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='知识点标题'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False, comment='知识点描述'),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='知识点分类'),
    sa.Column('difficulty_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='难度等级'),
    sa.Column('examples', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='例题列表'),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='标签列表'),
    sa.Column('related_concepts', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='相关概念'),
    sa.Column('prerequisites', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='前置知识'),
    sa.Column('examples_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='例题数量'),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='浏览次数'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('knowledge_points_pkey'))
    )
    op.create_index(op.f('ix_knowledge_points_id'), 'knowledge_points', ['id'], unique=False)
    op.create_index(op.f('idx_knowledge_points_title_gin'), 'knowledge_points', ['title'], unique=False, postgresql_ops={'title': 'gin_trgm_ops'}, postgresql_using='gin')
    op.create_index(op.f('idx_knowledge_points_difficulty'), 'knowledge_points', ['difficulty_level'], unique=False)
    op.create_index(op.f('idx_knowledge_points_created_at'), 'knowledge_points', ['created_at'], unique=False)
    op.create_index(op.f('idx_knowledge_points_category'), 'knowledge_points', ['category'], unique=False)
    op.create_table('search_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('query_text', sa.TEXT(), autoincrement=False, nullable=False, comment='查询文本'),
    sa.Column('query_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='查询类型: vector, fulltext, hybrid'),
    sa.Column('n_results', sa.INTEGER(), autoincrement=False, nullable=False, comment='请求结果数'),
    sa.Column('include_metadata', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否包含元数据'),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True, comment='响应时间(毫秒)'),
    sa.Column('vector_time_ms', sa.INTEGER(), autoincrement=False, nullable=True, comment='向量搜索耗时'),
    sa.Column('fulltext_time_ms', sa.INTEGER(), autoincrement=False, nullable=True, comment='全文搜索耗时'),
    sa.Column('rerank_time_ms', sa.INTEGER(), autoincrement=False, nullable=True, comment='重排序耗时'),
    sa.Column('results_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='实际返回结果数'),
    sa.Column('vector_results_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='向量搜索结果数'),
    sa.Column('fulltext_results_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='全文搜索结果数'),
    sa.Column('avg_similarity_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='平均相似度分数'),
    sa.Column('max_similarity_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='最高相似度分数'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('search_logs_pkey'))
    )
    op.create_index(op.f('ix_search_logs_id'), 'search_logs', ['id'], unique=False)
    op.create_index(op.f('idx_search_logs_response_time'), 'search_logs', ['response_time_ms'], unique=False)
    op.create_index(op.f('idx_search_logs_query_type'), 'search_logs', ['query_type'], unique=False)
    op.create_index(op.f('idx_search_logs_created_at'), 'search_logs', ['created_at'], unique=False)
    op.drop_table('documents')
    op.drop_table('chat_sessions')
    op.drop_table('chat_messages')
    # ### end Alembic commands ###
